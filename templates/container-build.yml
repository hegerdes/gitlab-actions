spec:
  inputs:
    stage:
      default: test
    build_image:
      default: gcr.io/kaniko-project/executor:debug
    force_run:
      type: boolean
      default: false
    push:
      type: boolean
      default: true
    kaniko_use_cache:
      type: boolean
      default: false
    image_tag:
        default: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    context:
        default: $CI_PROJECT_DIR
    dockerfile:
        default: $CI_PROJECT_DIR/Dockerfile
    authors:
        default: $CI_COMMIT_AUTHOR
    source_url:
        default: $CI_PROJECT_URL
    project_url:
        default: $CI_PROJECT_URL
    version:
        default: $CI_COMMIT_REF_NAME
    dokumentation_url:
        default: $CI_PROJECT_URL
    description:
        default: $CI_PROJECT_DESCRIPTION
    base_img_name:
        default: UNKNOWN
    vendor:
        default: UNKNOWN
    license:
        default: UNKNOWN
---

container_build:
  stage: $[[ inputs.stage ]]
  image:
    name: "$[[ inputs.build_image ]]"
    entrypoint: [""]
  variables:
    #More Information on Kaniko Caching: https://cloud.google.com/build/docs/kaniko-cache\n\t
    #Set to 2 weeks
    KANIKO_DEFAULT_CACHE_ARGS: --cache=true --cache-copy-layers=false --cache-ttl=336h
    KANIKO_PUSH: "$[[ inputs.push ]]"
    KANIKO_USE_CACHE: "$[[ inputs.kaniko_use_cache ]]"
    BUILD_IMAGE_TAG: "$[[ inputs.image_tag ]]"
    CONTEXT: "$[[ inputs.context ]]"
    DOCKERFILE: "$[[ inputs.dockerfile ]]"
    AUTHORS: "$[[ inputs.authors ]]"
    SOURCE_URL: "$[[ inputs.source_url ]]"
    PROJECT_URL: "$[[ inputs.project_url ]]"
    VERSION: "$[[ inputs.version ]]"
    DOKUMENTATION_URL: "$[[ inputs.dokumentation_url ]]"
    DESCRIPTION: "$[[ inputs.description ]]"
    VENDOR: "$[[ inputs.vendor ]]"
    LICENSE: "$[[ inputs.license ]]"
    BASE_IMG_NAME: "$[[ inputs.base_img_name ]]"
  script:
    - echo "Using $(/kaniko/executor version)"
    - |
      echo "Setting up job..." > /dev/null
      if [ ! -z ${KANIKO_EXTRA_ARGS+x} ]; then KANIKO_EXTRA_ARGS_INTERNAL="${KANIKO_EXTRA_ARGS}"; fi
      mkdir -p /kaniko/.docker && mkdir build-artifacts
    - |
      echo "Setting variables" > /dev/null
      if [ "${KANIKO_USE_CACHE}" = "true" ]; then export KANIKO_CACHE_ARGS=$KANIKO_DEFAULT_CACHE_ARGS; fi
      if [ "${KANIKO_PUSH}" = "false" ]; then export KANIKO_EXTRA_ARGS_INTERNAL="--no-push ${KANIKO_EXTRA_ARGS_INTERNAL}"; fi
      if [ ! -z ${KANIKO_EXTRA_BUILD_DST+x} ]; then KANIKO_EXTRA_ARGS_INTERNAL="--destination ${KANIKO_EXTRA_BUILD_DST} ${KANIKO_EXTRA_ARGS_INTERNAL}"; fi
      echo "Building ${BUILD_IMAGE_TAG}..."
      echo "Using context \"${CONTEXT}\" with dockerfile \"${DOCKERFILE}\""
    - |
      echo "Building image with kaniko..."
      if [ ! -z ${KANIKO_EXTRA_ARGS_INTERNAL+x} ]; then echo "Using extra build-args=${KANIKO_EXTRA_ARGS_INTERNAL}"; fi
      /kaniko/executor \
      --context $CONTEXT \
      --skip-unused-stages \
      --log-timestamp=true \
      --registry-mirror mirror.gcr.io \
      --dockerfile $DOCKERFILE $KANIKO_CACHE_ARGS \
      --build-arg COMMIT_HASH=$CI_COMMIT_SHORT_SHA \
      --build-arg COMMIT_TAG=$CI_COMMIT_REF_NAME \
      --build-arg BUILD_ENV=$BUILD_ENV \
      --label org.opencontainers.image.created="$(date -D FMT=minutes)" \
      --label org.opencontainers.image.authors="${AUTHORS}" \
      --label org.opencontainers.image.url="${PROJECT_URL}" \
      --label org.opencontainers.image.documentation="${DOKUMENTATION_URL}" \
      --label org.opencontainers.image.source="${SOURCE_URL}" \
      --label org.opencontainers.image.version="${VERSION}" \
      --label org.opencontainers.image.revision="${CI_COMMIT_SHORT_SHA}" \
      --label org.opencontainers.image.vendor="${VENDOR}" \
      --label org.opencontainers.image.licenses="${LICENSE}" \
      --label org.opencontainers.image.title="$BUILD_IMAGE_TAG" \
      --label org.opencontainers.image.description="$DESCRIPTION" \
      --label org.opencontainers.image.base.name="${BASE_IMG_NAME}" \
      --destination $BUILD_IMAGE_TAG $KANIKO_EXTRA_ARGS_INTERNAL
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build-artifacts/**
    expire_in: 1 week
    when: always
  rules:
    - if: '"$[[ inputs.force_run ]]" == "false"' # && ($CONTAINER_SCANNING_DISABLED == "true" || $CONTAINER_SCANNING_DISABLED == "1")'
      when: never

    # Add the job to merge request pipelines if there's an open merge request.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
          $CI_GITLAB_FIPS_MODE == "true"'
      variables:
        CS_IMAGE_SUFFIX: -fips
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

    # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never

    # Add the job to branch pipelines.
    - if: $CI_COMMIT_BRANCH
