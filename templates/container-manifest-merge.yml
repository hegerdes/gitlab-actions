spec:
  inputs:
    as_job:
      type: string
      default: merge-image-manifests
    stage:
      type: string
      default: release
    image:
      type: string
      default: mplatform/manifest-tool:alpine
    image_name_template:
      type: string
      default: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-ARCH"
    image_tags:
      type: array
      default:
        - "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    image_platforms:
      type: string
      default: "linux/amd64,linux/arm64"
    rules:
      type: array
      default:
        # Add the job to merge request pipelines if there's an open merge request.
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
        - if: $CI_OPEN_MERGE_REQUESTS
          when: never
        # Add the job to main branch pipelines.
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
        - if: $CI_COMMIT_TAG
---
$[[ inputs.as_job ]]:
  stage: $[[ inputs.stage ]]
  image:
    name: "$[[ inputs.image ]]"
    entrypoint: [""]
  script:
    - |
      export IMAGE_TAGS="$[[ inputs.image_tags ]]"
      IMAGE_TAGS="${IMAGE_TAGS#[}"
      IMAGE_TAGS="${IMAGE_TAGS%]}"

      if [ -z ${IMAGE_TOOL_USERNAME+x} ]; then
        export IMAGE_TOOL_USERNAME=$CI_REGISTRY_USER
      fi
      if [ -z ${IMAGE_TOOL_PASSWORD+x} ]; then
        export IMAGE_TOOL_PASSWORD=$CI_REGISTRY_PASSWORD
      fi

      # Read the cleaned-up string into an array, splitting by commas
      IFS=","
      for IMAGE_TAG in ${IMAGE_TAGS}; do
          # Ensure to strip any whitespace and send a curl request to each URL
          echo "Pushing manifest for ${IMAGE_TAG}"
          manifest-tool --username=${IMAGE_TOOL_USERNAME} --password=${CI_REGISTRY_PASSWORD} push from-args \
            --platforms $[[ inputs.image_platforms ]] \
            --template $[[ inputs.image_name_template ]] \
            --target ${IMAGE_TAG}
      done
  rules: $[[ inputs.rules ]]
